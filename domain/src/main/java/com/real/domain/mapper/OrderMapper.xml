<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.real.domain.mapper.OrderMapper">
    <resultMap id="orderResultMap" type="Order">
        <id property="orderId" column="order_id"/>  <!-- 映射订单ID -->
        <result property="userId" column="user_id"/>
        <result property="totalAmount" column="total_amount"/>
        <result property="status" column="status"/>
        <result property="createdAt" column="created_at"/>
        <collection
                property="items"
                ofType="OrderItem"
                resultMap="orderItemResultMap"/>
    </resultMap>
    <resultMap id="orderItemResultMap" type="OrderItem">
        <id property="orderItemId" column="order_item_id"/>
        <result property="orderId" column="order_id"/>
        <result property="productId" column="product_id"/>
        <result property="quantity" column="quantity"/>
        <result property="price" column="price"/>
    </resultMap>

    <insert id="insertOrder" parameterType="Order">
        INSERT INTO `order` (order_id, user_id, total_amount, status)
        VALUES (#{orderId}, #{userId}, #{totalAmount}, #{status})
    </insert>
    <update id="updateOrder" parameterType="Order">
        UPDATE `order`
        SET user_id = #{userId}, total_amount = #{totalAmount}, status = #{status}
        WHERE order_id = #{orderId}
    </update>

    <select id="selectOrderById" resultMap="orderResultMap">
        SELECT
            o.order_id, o.user_id, o.total_amount, o.status, o.created_at,
            i.order_item_id, i.order_id, i.product_id, i.quantity, i.price
        FROM `order` o
        LEFT JOIN order_item i ON o.order_id = i.order_id
        WHERE o.order_id = #{orderId}
    </select>
    <select id="selectOrdersByUserId" resultMap="orderResultMap">
        WITH paginated_orders AS (
            SELECT
                order_id,
                user_id,
                total_amount,
                status,
                created_at
            FROM `order`
            WHERE user_id = #{userId}
            ORDER BY created_at DESC
            LIMIT #{orderLimit} OFFSET #{orderOffset}
        ),
        order_items_paged AS (
            SELECT
                oi.*,
                ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY order_item_id) AS rn
            FROM order_item oi
            WHERE oi.order_id IN (SELECT order_id FROM paginated_orders)
        )
        SELECT
            po.order_id,
            po.user_id,
            po.total_amount,
            po.status,
            po.created_at,
            oip.order_item_id,
            oip.order_id,
            oip.product_id,
            oip.quantity,
            oip.price
        FROM paginated_orders po
        LEFT JOIN order_items_paged oip
        ON po.order_id = oip.order_id
        AND oip.rn > #{itemOffset}
        AND oip.rn &lt;= #{itemOffset} + #{itemLimit}
        ORDER BY po.created_at DESC, oip.order_item_id;
    </select>
    <select id="selectOrdersByOrderStatus" resultType="Order">
        SELECT *
        FROM `order` o
        WHERE o.status = #{status}
    </select>
    <select id="selectOrdersByConditions" resultMap="orderResultMap">
        SELECT
            o.order_id,
            o.user_id,
            o.total_amount,
            o.status,
            o.created_at,
            oi.order_item_id,
            oi.order_id,
            oi.product_id,
            oi.quantity,
            oi.price
        FROM `order` o
        LEFT JOIN order_item oi ON o.order_id = oi.order_id
        <where>
            1 = 1
            <if test="userId != null">
                AND o.user_id = #{userId}
            </if>
            <if test="status != null">
                AND o.status = #{status}
            </if>
            <if test="startTime != null">
                AND o.created_at &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                AND o.created_at &lt;= #{endTime}
            </if>
        </where>
    </select>

    <insert id="insertOrderItem" parameterType="OrderItem"
            useGeneratedKeys="true" keyProperty="orderItemId">
        INSERT INTO order_item (order_id, product_id, quantity, price)
        VALUES (#{orderId}, #{productId}, #{quantity}, #{price})
    </insert>
    <insert id="insertOrderItems" parameterType="list" useGeneratedKeys="true" keyProperty="orderItemId">
        INSERT INTO order_item (order_id, product_id, quantity, price)
        VALUES
        <foreach collection="list" item="item" separator = ",">
            (#{item.orderId}, #{item.productId}, #{item.quantity}, #{item.price})
        </foreach>
    </insert>

</mapper>